/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE WITHOUT COPYING TO YOUR SRC DIRECTORY.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues,
 * or contact author landerlyoung@gmail.com.
 */
#include "JennyTest.h"

#ifdef DEBUG
#include <android/log.h>
#define LOGV(...)   __android_log_print((int)ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__)
#define LOGD(...)   __android_log_print((int)ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
#define LOGI(...)   __android_log_print((int)ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
#define LOGW(...)   __android_log_print((int)ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)
#define LOGE(...)   __android_log_print((int)ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
#else
#define LOGV(...)
#define LOGD(...)
#define LOGI(...)
#define LOGW(...)
#define LOGE(...)
#endif



//change to whatever you like
static constexpr auto LOG_TAG = "JennyTest";

namespace JennyTest {

/*
 * Class:     rainmtime_com_demorepo_ndk_JennyTest
 * Method:    public int add(int a, int b)
 * Signature: (II)I
 */
jint add(JNIEnv *env, jobject thiz, jint a, jint b) {
    return 0;
}


/*
 * Class:     rainmtime_com_demorepo_ndk_JennyTest
 * Method:    public void cpp_magic(java.lang.String s, byte[] data)
 * Signature: (Ljava/lang/String;[B)V
 */
void cpp_magic(JNIEnv *env, jobject thiz, jstring s, jbyteArray data) {
    return;
}


/*
 * Class:     rainmtime_com_demorepo_ndk_JennyTest
 * Method:    public void sub(int a, int b)
 * Signature: (II)V
 */
void sub(JNIEnv *env, jobject thiz, jint a, jint b) {
    return;
}




static const JNINativeMethod gsNativeMethods[] = {
    {
        /* method name      */ const_cast<char *>("add"),
        /* method signature */ const_cast<char *>("(II)I"),
        /* function pointer */ reinterpret_cast<void *>(add)
    },    {
        /* method name      */ const_cast<char *>("cpp_magic"),
        /* method signature */ const_cast<char *>("(Ljava/lang/String;[B)V"),
        /* function pointer */ reinterpret_cast<void *>(cpp_magic)
    },    {
        /* method name      */ const_cast<char *>("sub"),
        /* method signature */ const_cast<char *>("(II)V"),
        /* function pointer */ reinterpret_cast<void *>(sub)
    }
};
static const int gsMethodCount =
    sizeof(gsNativeMethods) / sizeof(JNINativeMethod);

/**
 * register Native functions
 * @returns success or not
 */
bool registerNativeFunctions(JNIEnv *env) {
    jclass clazz = env->FindClass(FULL_CLASS_NAME);
    return clazz != nullptr
           && 0 == env->RegisterNatives(clazz, gsNativeMethods, gsMethodCount);
}



} //endof namespace JennyTest


JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    JNIEnv *env;
    if (vm->GetEnv(reinterpret_cast<void**>(&env),
                   JNI_VERSION_1_6) != JNI_OK) {
        return -1;
    }
    JennyTest::registerNativeFunctions(env);
    return JNI_VERSION_1_6;
}

JNIEXPORT void JNICALL JNI_OnUnload(JavaVM *vm, void *reserved) {

}
